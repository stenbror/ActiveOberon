
// ActiveOberon Compiler, a native ARM v8 & X86-64 compiler / linker / builder utility.
// Written by Richard Magnor Stenbro. Licensed under GPL v3
// Arm64 Assembler instruction-set module for compiling and linking of projects written in ActiveOberon language


/// Conditional part of an opcode.
pub enum Conditional {
    ConditionEQ = 0,
    ConditionNE = 1,
    ConditionCS = 2,
    ConditionCC = 3,
    ConditionMI = 4,
    ConditionPL = 5,
    ConditionVS = 6,
    ConditionVC = 7,
    ConditionHI = 8,
    ConditionLS = 9,
    ConditionGE = 10,
    ConditionLT = 11,
    ConditionGT = 12,
    ConditionLE = 13,
    ConditionAL = 14,
    ConditionNV = 15,
}

impl Conditional {
    pub const ConditionHS: Conditional = Conditional::ConditionCS;
    pub const ConditionLO: Conditional = Conditional::ConditionCC;
    pub const Unconditional: Conditional = Conditional::ConditionAL;
}

pub enum IndexFlags {
    Increment = 0,
    Decrement = 1,
    PostIndexed = 2,
    PreIndexed = 3
}

/// ARM64 Opcodes supported by inline assembler
pub enum Opcodes {
    OpAdc = 0,
    OpAdd = 1,
    OpAnd = 2,
    OpB = 3,
    OpBic = 4,
    OpBkpt = 5,
    OpBl = 6,
    OpBlx = 7,
    OpBx = 8,
    OpCdp = 9,
    OpCdp2 = 10,
    OpClz = 11,
    OpCmn = 12,
    OpCmp = 13,
    OpEor = 14,
    OpFabsd = 15,
    OpFabss = 16,
    OpFaddd = 17,
    OpFadds = 18,
    OpFcmpd = 19,
    OpFcmped = 20,
    OpFcmpes = 21,
    OpFcmpezd = 22,
    OpFcmpezs = 23,
    OpFcmps = 24,
    OpFcmpzd = 25,
    OpFcmpzs = 26,
    OpFcpyd = 27,
    OpFcpys = 28,
    OpFcvtds = 29,
    OpFcvtsd = 30,
    OpFdivd = 31,
    OpFdivs = 32,
    OpFldd = 33,
    OpFldmiad = 34,
    OpFldmias = 35,
    OpFldmiax = 36,
    OpFldmdbd = 37,
    OpFldmdbs = 38,
    OpFldmdbx = 39,
    OpFlds = 40,
    OpFmacd = 41,
    OpFmacs = 42,
    OpFmdhr = 43,
    OpFmdlr = 44,
    OpFmrdh = 45,
    OpFmrdl = 46,
    OpFmrs = 47,
    OpFmrx = 48,
    OpFmscd = 49,
    OpFmscs = 50,
    OpFmsr = 51,
    OpFmstat = 52,
    OpFmuld = 53,
    OpFmuls = 54,
    OpFmxr = 55,
    OpFnegd = 56,
    OpFnegs = 57,
    OpFnmacd = 58,
    OpFnmacs = 59,
    OpFnmscd = 60,
    OpFnmscs = 61,
    OpFnmuld = 62,
    OpFnmuls = 63,
    OpFsitod = 64,
    OpFsitos = 65,
    OpFsqrtd = 66,
    OpFsqrts = 67,
    OpFstd = 68,
    OpFstmiad = 69,
    OpFstmias = 70,
    OpFstmiax = 71,
    OpFstmdbd = 72,
    OpFstmdbs = 73,
    OpFstmdbx = 74,
    OpFsts = 75,
    OpFsubd = 76,
    OpFsubs = 77,
    OpFtosid = 78,
    OpFtosizd = 79,
    OpFtosis = 80,
    OpFtosizs = 81,
    OpFtouid = 82,
    OpFtouizd = 83,
    OpFtouis = 84,
    OpFtouizs = 85,
    OpFuitod = 86,
    OpFuitos = 87,
    OpLdc = 88,
    OpLdc2 = 89,
    OpLdm = 90,
    OpLdr = 91,
    OpMcr = 92,
    OpMcr2 = 93,
    OpMcrr = 94,
    OpMla = 95,
    OpMov = 96,
    OpMrc = 97,
    OpMrc2 = 98,
    OpMrrc = 99,
    OpMrs = 100,
    OpMsr = 101,
    OpMul = 102,
    OpMvn = 103,
    OpOrr = 104,
    OpPld = 105,
    OpQadd = 106,
    OpQdadd = 107,
    OpQdsub = 108,
    OpQsub = 109,
    OpRsb = 110,
    OpRsc = 111,
    OpSbc = 112,
    OpSmlabb = 113,
    OpSmlabt = 114,
    OpSmlal = 115,
    OpSmlatb = 116,
    OpSmlatt = 117,
    OpSmlalbb = 118,
    OpSmlalbt = 119,
    OpSmlaltb = 120,
    OpSmlaltt = 121,
    OpSmlawb = 122,
    OpSmlawt = 123,
    OpSmulbb = 124,
    OpSmulbt = 125,
    OpSmultb = 126,
    OpSmultt = 127,
    OpSmulwb = 128,
    OpSmulwt = 129,
    OpSmull = 130,
    OpStc = 131,
    OpStc2 = 132,
    OpStm = 133,
    OpStr = 134,
    OpSub = 135,
    OpSwi = 136,
    OpSwp = 137,
    OpTeq = 138,
    OpTst = 139,
    OpUmlal = 140,
    OpUmull = 141,
    OpIsb = 142,
    OpVadd = 143,
    OpVaddl = 144,
    OpVaddw = 145,
    OpVmul = 146,
    OpVmull = 147,
    OpVmsr = 148,
    OpVmrs = 149,
    OpVldr = 150,
    OpVstr = 151,
    OpVdiv = 152,
    OpVmla = 153,
    OpVmls = 154,
    OpVmin = 155,
    OpVmax = 156,
    OpVsub = 157,
    OpVabs = 158,
    OpVabd = 159,
    OpLsl = 160,
    OpLsr = 161,
    OpVld1 = 162,
    OpVst1 = 163,
    OpVpadd = 164,
    OpVmov = 165,
    OpSev = 166,
    OpDsb = 167,
    OpLdrex = 168,
    OpStrex = 169,
    OpAdr = 170,
    OpLdrexb = 171,
    OpStrexb = 172,
    OpDmb = 173,
    OpClrex = 174,
    OpRev = 175,
    OpRev16 = 176,
    OpUxth = 177,
    OpWfe = 178,
    OpWfi = 179,
    OpMovw = 180,
    OpUdf = 181,
}

pub enum Flags {
    FlagB = 0,
    FlagBT = 1,
    FlagD = 2,
    FlagDA = 3,
    FlagDB = 4,
    FlagH = 5,
    FlagIA = 6,
    FlagIB = 7,
    FlagL = 8,
    FlagS = 9,
    FlagSB = 10,
    FlagSH = 11,
    FlagT = 12,
    FlagNEON8bits = 13,
    FlagNEON16bits = 14,
    FlagNEON32bits = 15,
    FlagNEON64bits = 16,
    FlagNEONInt = 17,
    FlagNEONSigned = 18,
    FlagNEONUnsigned = 19,
    FlagNEONFloat = 20,
    FlagNEONPoly = 21,
    FlagNEONUndef = 22,
    FlagCondition = 23,
    FlagUserMode = 24,
    FlagBaseRegisterUpdate = 25
}

pub enum Encoding {
    EncodingR16= 0,
    EncodingR12= 1,
    EncodingR8= 2,
    EncodingR0= 3,
    EncodingAddressingMode1= 4,
    EncodingAddressingMode2= 5,
    EncodingAddressingMode3= 6,
    EncodingAddressingMode5= 7,
    EncodingCoprocessor= 8,
    EncodingCR0= 9,
    EncodingCR12= 10,
    EncodingCR16= 11,
    EncodingOpcode20= 12,
    EncodingOpcode21= 13,
    EncodingOpcode5= 14,
    EncodingOpcode4= 15,
    EncodingSignedImm24= 16,
    EncodingImm24= 17,
    EncodingImm16= 18,
    EncodingRotImm8= 19,
    EncodingRegisterList= 20,
    EncodingPSR= 21,
    EncodingFields= 22,
    EncodingDR0= 23,
    EncodingDR12= 24,
    EncodingDR16= 25,
    EncodingFR0= 26,
    EncodingFR12= 27,
    EncodingFR16= 28,
    EncodingDRegisterList= 29,
    EncodingFRegisterList= 30,
    EncodingAddressingMode5V= 31,
    EncodingNEONQd = 32,
    EncodingNEONQn = 33,
    EncodingNEONQm = 34,
    EncodingNEONDd = 35,
    EncodingNEONDn = 36,
    EncodingNEONDm = 37,
    EncodingNEONSd = 38,
    EncodingNEONSn = 39,
    EncodingNEONSm = 40,
    EncodingNEONImmAndSize = 41,
    EncodingNEON8bitImm = 42,
    EncodingNEON3bitImm = 43,
    EncodingNEONQorDd = 44,
    EncodingNEONQorDn = 45,
    EncodingNEONQorDm = 46,
    EncodingNEONDorSd = 47,
    EncodingNEONDorSn = 48,
    EncodingNEONDorSm = 49,
    EncodingNEONDRegList = 50,
    EncodingNEONSysReg = 51,
    EncodingNEONSigned8bitImm = 52,
    EncodingImm7to11 = 53,
    EncodingImm12a0imm4a16 = 54
}

pub enum NeonEncoding {
    EncodeNEON3RegSame = 0,
    EncodeNEON3RegLong = 1,
    EncodeNEON3RegNarrow = 2,
    EncodeNEON3RegWide = 3,
    EncodeNEON2RegScalar = 4,
    EncodeNEON2RegScalarLong = 5,
    EncodeNEON2RegShift = 6,
    EncodeNEON2RegShiftNarrow = 7,
    EncodeNEON2RegShiftLong = 8,
    EncodeNEON2RegMisc = 9,
    EncodeNEON2RegMiscNarrow = 10,
    EncodeNEON2RegMiscLong = 11,
    EncodeNEONVFP = 12,
    EncodeNEONVFP2Reg = 13,
    EncodeNEONVFP1Reg = 14
}

